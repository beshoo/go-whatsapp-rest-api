// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"bitbucket.org/rockyOO7/wa-api/gen/restapi/operations/hooks"
	"bitbucket.org/rockyOO7/wa-api/gen/restapi/operations/number"
	"bitbucket.org/rockyOO7/wa-api/gen/restapi/operations/profile"
	"bitbucket.org/rockyOO7/wa-api/gen/restapi/operations/send"
)

// NewWaAPI creates a new Wa instance
func NewWaAPI(spec *loads.Document) *WaAPI {
	return &WaAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,
		UrlformConsumer:       runtime.DiscardConsumer,

		JSONProducer: runtime.JSONProducer(),

		NumberGetAvatarHandler: number.GetAvatarHandlerFunc(func(params number.GetAvatarParams) middleware.Responder {
			return middleware.NotImplemented("operation number.GetAvatar has not yet been implemented")
		}),
		HooksPostMessageAudioHandler: hooks.PostMessageAudioHandlerFunc(func(params hooks.PostMessageAudioParams) middleware.Responder {
			return middleware.NotImplemented("operation hooks.PostMessageAudio has not yet been implemented")
		}),
		HooksPostMessageContactHandler: hooks.PostMessageContactHandlerFunc(func(params hooks.PostMessageContactParams) middleware.Responder {
			return middleware.NotImplemented("operation hooks.PostMessageContact has not yet been implemented")
		}),
		HooksPostMessageDocHandler: hooks.PostMessageDocHandlerFunc(func(params hooks.PostMessageDocParams) middleware.Responder {
			return middleware.NotImplemented("operation hooks.PostMessageDoc has not yet been implemented")
		}),
		HooksPostMessageImageHandler: hooks.PostMessageImageHandlerFunc(func(params hooks.PostMessageImageParams) middleware.Responder {
			return middleware.NotImplemented("operation hooks.PostMessageImage has not yet been implemented")
		}),
		HooksPostMessageLivelocationHandler: hooks.PostMessageLivelocationHandlerFunc(func(params hooks.PostMessageLivelocationParams) middleware.Responder {
			return middleware.NotImplemented("operation hooks.PostMessageLivelocation has not yet been implemented")
		}),
		HooksPostMessageLocationHandler: hooks.PostMessageLocationHandlerFunc(func(params hooks.PostMessageLocationParams) middleware.Responder {
			return middleware.NotImplemented("operation hooks.PostMessageLocation has not yet been implemented")
		}),
		HooksPostMessageTextHandler: hooks.PostMessageTextHandlerFunc(func(params hooks.PostMessageTextParams) middleware.Responder {
			return middleware.NotImplemented("operation hooks.PostMessageText has not yet been implemented")
		}),
		HooksPostMessageVideoHandler: hooks.PostMessageVideoHandlerFunc(func(params hooks.PostMessageVideoParams) middleware.Responder {
			return middleware.NotImplemented("operation hooks.PostMessageVideo has not yet been implemented")
		}),
		HooksPostNotifyConnectivityHandler: hooks.PostNotifyConnectivityHandlerFunc(func(params hooks.PostNotifyConnectivityParams) middleware.Responder {
			return middleware.NotImplemented("operation hooks.PostNotifyConnectivity has not yet been implemented")
		}),
		HooksPostNotifyLogoutHandler: hooks.PostNotifyLogoutHandlerFunc(func(params hooks.PostNotifyLogoutParams) middleware.Responder {
			return middleware.NotImplemented("operation hooks.PostNotifyLogout has not yet been implemented")
		}),
		HooksPostNotifyReceiveHandler: hooks.PostNotifyReceiveHandlerFunc(func(params hooks.PostNotifyReceiveParams) middleware.Responder {
			return middleware.NotImplemented("operation hooks.PostNotifyReceive has not yet been implemented")
		}),
		HooksPostPowerBatteryHandler: hooks.PostPowerBatteryHandlerFunc(func(params hooks.PostPowerBatteryParams) middleware.Responder {
			return middleware.NotImplemented("operation hooks.PostPowerBattery has not yet been implemented")
		}),
		SendSendLinkHandler: send.SendLinkHandlerFunc(func(params send.SendLinkParams) middleware.Responder {
			return middleware.NotImplemented("operation send.SendLink has not yet been implemented")
		}),
		SendSendVcardHandler: send.SendVcardHandlerFunc(func(params send.SendVcardParams) middleware.Responder {
			return middleware.NotImplemented("operation send.SendVcard has not yet been implemented")
		}),
		ProfileConnectHandler: profile.ConnectHandlerFunc(func(params profile.ConnectParams) middleware.Responder {
			return middleware.NotImplemented("operation profile.Connect has not yet been implemented")
		}),
		ProfileDisconnectHandler: profile.DisconnectHandlerFunc(func(params profile.DisconnectParams) middleware.Responder {
			return middleware.NotImplemented("operation profile.Disconnect has not yet been implemented")
		}),
		NumberGetChatsHandler: number.GetChatsHandlerFunc(func(params number.GetChatsParams) middleware.Responder {
			return middleware.NotImplemented("operation number.GetChats has not yet been implemented")
		}),
		ProfileGetContactsHandler: profile.GetContactsHandlerFunc(func(params profile.GetContactsParams) middleware.Responder {
			return middleware.NotImplemented("operation profile.GetContacts has not yet been implemented")
		}),
		NumberHasWhatsAppHandler: number.HasWhatsAppHandlerFunc(func(params number.HasWhatsAppParams) middleware.Responder {
			return middleware.NotImplemented("operation number.HasWhatsApp has not yet been implemented")
		}),
		ProfileIsConnectedHandler: profile.IsConnectedHandlerFunc(func(params profile.IsConnectedParams) middleware.Responder {
			return middleware.NotImplemented("operation profile.IsConnected has not yet been implemented")
		}),
		NumberIsOnlineHandler: number.IsOnlineHandlerFunc(func(params number.IsOnlineParams) middleware.Responder {
			return middleware.NotImplemented("operation number.IsOnline has not yet been implemented")
		}),
		ProfileLogoutHandler: profile.LogoutHandlerFunc(func(params profile.LogoutParams) middleware.Responder {
			return middleware.NotImplemented("operation profile.Logout has not yet been implemented")
		}),
		ProfileProfileHandler: profile.ProfileHandlerFunc(func(params profile.ProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation profile.Profile has not yet been implemented")
		}),
		ProfileScanQrHandler: profile.ScanQrHandlerFunc(func(params profile.ScanQrParams) middleware.Responder {
			return middleware.NotImplemented("operation profile.ScanQr has not yet been implemented")
		}),
		SendSendAudioHandler: send.SendAudioHandlerFunc(func(params send.SendAudioParams) middleware.Responder {
			return middleware.NotImplemented("operation send.SendAudio has not yet been implemented")
		}),
		SendSendAudioRecordHandler: send.SendAudioRecordHandlerFunc(func(params send.SendAudioRecordParams) middleware.Responder {
			return middleware.NotImplemented("operation send.SendAudioRecord has not yet been implemented")
		}),
		SendSendDocHandler: send.SendDocHandlerFunc(func(params send.SendDocParams) middleware.Responder {
			return middleware.NotImplemented("operation send.SendDoc has not yet been implemented")
		}),
		SendSendImageHandler: send.SendImageHandlerFunc(func(params send.SendImageParams) middleware.Responder {
			return middleware.NotImplemented("operation send.SendImage has not yet been implemented")
		}),
		SendSendLocationHandler: send.SendLocationHandlerFunc(func(params send.SendLocationParams) middleware.Responder {
			return middleware.NotImplemented("operation send.SendLocation has not yet been implemented")
		}),
		SendSendReadHandler: send.SendReadHandlerFunc(func(params send.SendReadParams) middleware.Responder {
			return middleware.NotImplemented("operation send.SendRead has not yet been implemented")
		}),
		SendSendTextHandler: send.SendTextHandlerFunc(func(params send.SendTextParams) middleware.Responder {
			return middleware.NotImplemented("operation send.SendText has not yet been implemented")
		}),
		SendSendVideoHandler: send.SendVideoHandlerFunc(func(params send.SendVideoParams) middleware.Responder {
			return middleware.NotImplemented("operation send.SendVideo has not yet been implemented")
		}),
		ProfileSetHookHandler: profile.SetHookHandlerFunc(func(params profile.SetHookParams) middleware.Responder {
			return middleware.NotImplemented("operation profile.SetHook has not yet been implemented")
		}),
	}
}

/*WaAPI Whatsapp Rest API, you will need to scan the qr code using or your own front end or you could use this [ScanQR](/qrcode) link.
 You can download the code [here](/qrcode.zip)

 To recieve message you will need to create your own server and set its url as hook using this [API](/#/Profile/setHook) as shown in hook [definitions](/#/Hooks).
You can download a sample nodejs server [here](/test-wa-handler-server.zip)

 <b>PS:</b> Phone numbers should have country code without the <b>+</b> sign eg: <b>14049190651</b> not <b>+14049190651</b> */
type WaAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for the following mime types:
	//   - multipart/form-data
	MultipartformConsumer runtime.Consumer
	// UrlformConsumer registers a consumer for the following mime types:
	//   - application/x-www-form-urlencoded
	UrlformConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// NumberGetAvatarHandler sets the operation handler for the get avatar operation
	NumberGetAvatarHandler number.GetAvatarHandler
	// HooksPostMessageAudioHandler sets the operation handler for the post message audio operation
	HooksPostMessageAudioHandler hooks.PostMessageAudioHandler
	// HooksPostMessageContactHandler sets the operation handler for the post message contact operation
	HooksPostMessageContactHandler hooks.PostMessageContactHandler
	// HooksPostMessageDocHandler sets the operation handler for the post message doc operation
	HooksPostMessageDocHandler hooks.PostMessageDocHandler
	// HooksPostMessageImageHandler sets the operation handler for the post message image operation
	HooksPostMessageImageHandler hooks.PostMessageImageHandler
	// HooksPostMessageLivelocationHandler sets the operation handler for the post message livelocation operation
	HooksPostMessageLivelocationHandler hooks.PostMessageLivelocationHandler
	// HooksPostMessageLocationHandler sets the operation handler for the post message location operation
	HooksPostMessageLocationHandler hooks.PostMessageLocationHandler
	// HooksPostMessageTextHandler sets the operation handler for the post message text operation
	HooksPostMessageTextHandler hooks.PostMessageTextHandler
	// HooksPostMessageVideoHandler sets the operation handler for the post message video operation
	HooksPostMessageVideoHandler hooks.PostMessageVideoHandler
	// HooksPostNotifyConnectivityHandler sets the operation handler for the post notify connectivity operation
	HooksPostNotifyConnectivityHandler hooks.PostNotifyConnectivityHandler
	// HooksPostNotifyLogoutHandler sets the operation handler for the post notify logout operation
	HooksPostNotifyLogoutHandler hooks.PostNotifyLogoutHandler
	// HooksPostNotifyReceiveHandler sets the operation handler for the post notify receive operation
	HooksPostNotifyReceiveHandler hooks.PostNotifyReceiveHandler
	// HooksPostPowerBatteryHandler sets the operation handler for the post power battery operation
	HooksPostPowerBatteryHandler hooks.PostPowerBatteryHandler
	// SendSendLinkHandler sets the operation handler for the send link operation
	SendSendLinkHandler send.SendLinkHandler
	// SendSendVcardHandler sets the operation handler for the send vcard operation
	SendSendVcardHandler send.SendVcardHandler
	// ProfileConnectHandler sets the operation handler for the connect operation
	ProfileConnectHandler profile.ConnectHandler
	// ProfileDisconnectHandler sets the operation handler for the disconnect operation
	ProfileDisconnectHandler profile.DisconnectHandler
	// NumberGetChatsHandler sets the operation handler for the get chats operation
	NumberGetChatsHandler number.GetChatsHandler
	// ProfileGetContactsHandler sets the operation handler for the get contacts operation
	ProfileGetContactsHandler profile.GetContactsHandler
	// NumberHasWhatsAppHandler sets the operation handler for the has whats app operation
	NumberHasWhatsAppHandler number.HasWhatsAppHandler
	// ProfileIsConnectedHandler sets the operation handler for the is connected operation
	ProfileIsConnectedHandler profile.IsConnectedHandler
	// NumberIsOnlineHandler sets the operation handler for the is online operation
	NumberIsOnlineHandler number.IsOnlineHandler
	// ProfileLogoutHandler sets the operation handler for the logout operation
	ProfileLogoutHandler profile.LogoutHandler
	// ProfileProfileHandler sets the operation handler for the profile operation
	ProfileProfileHandler profile.ProfileHandler
	// ProfileScanQrHandler sets the operation handler for the scan qr operation
	ProfileScanQrHandler profile.ScanQrHandler
	// SendSendAudioHandler sets the operation handler for the send audio operation
	SendSendAudioHandler send.SendAudioHandler
	// SendSendAudioRecordHandler sets the operation handler for the send audio record operation
	SendSendAudioRecordHandler send.SendAudioRecordHandler
	// SendSendDocHandler sets the operation handler for the send doc operation
	SendSendDocHandler send.SendDocHandler
	// SendSendImageHandler sets the operation handler for the send image operation
	SendSendImageHandler send.SendImageHandler
	// SendSendLocationHandler sets the operation handler for the send location operation
	SendSendLocationHandler send.SendLocationHandler
	// SendSendReadHandler sets the operation handler for the send read operation
	SendSendReadHandler send.SendReadHandler
	// SendSendTextHandler sets the operation handler for the send text operation
	SendSendTextHandler send.SendTextHandler
	// SendSendVideoHandler sets the operation handler for the send video operation
	SendSendVideoHandler send.SendVideoHandler
	// ProfileSetHookHandler sets the operation handler for the set hook operation
	ProfileSetHookHandler profile.SetHookHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *WaAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *WaAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *WaAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *WaAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *WaAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *WaAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *WaAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the WaAPI
func (o *WaAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}
	if o.UrlformConsumer == nil {
		unregistered = append(unregistered, "UrlformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.NumberGetAvatarHandler == nil {
		unregistered = append(unregistered, "number.GetAvatarHandler")
	}
	if o.HooksPostMessageAudioHandler == nil {
		unregistered = append(unregistered, "hooks.PostMessageAudioHandler")
	}
	if o.HooksPostMessageContactHandler == nil {
		unregistered = append(unregistered, "hooks.PostMessageContactHandler")
	}
	if o.HooksPostMessageDocHandler == nil {
		unregistered = append(unregistered, "hooks.PostMessageDocHandler")
	}
	if o.HooksPostMessageImageHandler == nil {
		unregistered = append(unregistered, "hooks.PostMessageImageHandler")
	}
	if o.HooksPostMessageLivelocationHandler == nil {
		unregistered = append(unregistered, "hooks.PostMessageLivelocationHandler")
	}
	if o.HooksPostMessageLocationHandler == nil {
		unregistered = append(unregistered, "hooks.PostMessageLocationHandler")
	}
	if o.HooksPostMessageTextHandler == nil {
		unregistered = append(unregistered, "hooks.PostMessageTextHandler")
	}
	if o.HooksPostMessageVideoHandler == nil {
		unregistered = append(unregistered, "hooks.PostMessageVideoHandler")
	}
	if o.HooksPostNotifyConnectivityHandler == nil {
		unregistered = append(unregistered, "hooks.PostNotifyConnectivityHandler")
	}
	if o.HooksPostNotifyLogoutHandler == nil {
		unregistered = append(unregistered, "hooks.PostNotifyLogoutHandler")
	}
	if o.HooksPostNotifyReceiveHandler == nil {
		unregistered = append(unregistered, "hooks.PostNotifyReceiveHandler")
	}
	if o.HooksPostPowerBatteryHandler == nil {
		unregistered = append(unregistered, "hooks.PostPowerBatteryHandler")
	}
	if o.SendSendLinkHandler == nil {
		unregistered = append(unregistered, "send.SendLinkHandler")
	}
	if o.SendSendVcardHandler == nil {
		unregistered = append(unregistered, "send.SendVcardHandler")
	}
	if o.ProfileConnectHandler == nil {
		unregistered = append(unregistered, "profile.ConnectHandler")
	}
	if o.ProfileDisconnectHandler == nil {
		unregistered = append(unregistered, "profile.DisconnectHandler")
	}
	if o.NumberGetChatsHandler == nil {
		unregistered = append(unregistered, "number.GetChatsHandler")
	}
	if o.ProfileGetContactsHandler == nil {
		unregistered = append(unregistered, "profile.GetContactsHandler")
	}
	if o.NumberHasWhatsAppHandler == nil {
		unregistered = append(unregistered, "number.HasWhatsAppHandler")
	}
	if o.ProfileIsConnectedHandler == nil {
		unregistered = append(unregistered, "profile.IsConnectedHandler")
	}
	if o.NumberIsOnlineHandler == nil {
		unregistered = append(unregistered, "number.IsOnlineHandler")
	}
	if o.ProfileLogoutHandler == nil {
		unregistered = append(unregistered, "profile.LogoutHandler")
	}
	if o.ProfileProfileHandler == nil {
		unregistered = append(unregistered, "profile.ProfileHandler")
	}
	if o.ProfileScanQrHandler == nil {
		unregistered = append(unregistered, "profile.ScanQrHandler")
	}
	if o.SendSendAudioHandler == nil {
		unregistered = append(unregistered, "send.SendAudioHandler")
	}
	if o.SendSendAudioRecordHandler == nil {
		unregistered = append(unregistered, "send.SendAudioRecordHandler")
	}
	if o.SendSendDocHandler == nil {
		unregistered = append(unregistered, "send.SendDocHandler")
	}
	if o.SendSendImageHandler == nil {
		unregistered = append(unregistered, "send.SendImageHandler")
	}
	if o.SendSendLocationHandler == nil {
		unregistered = append(unregistered, "send.SendLocationHandler")
	}
	if o.SendSendReadHandler == nil {
		unregistered = append(unregistered, "send.SendReadHandler")
	}
	if o.SendSendTextHandler == nil {
		unregistered = append(unregistered, "send.SendTextHandler")
	}
	if o.SendSendVideoHandler == nil {
		unregistered = append(unregistered, "send.SendVideoHandler")
	}
	if o.ProfileSetHookHandler == nil {
		unregistered = append(unregistered, "profile.SetHookHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *WaAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *WaAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *WaAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *WaAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer
		case "application/x-www-form-urlencoded":
			result["application/x-www-form-urlencoded"] = o.UrlformConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *WaAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *WaAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the wa API
func (o *WaAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *WaAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/number/{phoneNumber}/avatar"] = number.NewGetAvatar(o.context, o.NumberGetAvatarHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/message/audio"] = hooks.NewPostMessageAudio(o.context, o.HooksPostMessageAudioHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/message/contact"] = hooks.NewPostMessageContact(o.context, o.HooksPostMessageContactHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/message/doc"] = hooks.NewPostMessageDoc(o.context, o.HooksPostMessageDocHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/message/image"] = hooks.NewPostMessageImage(o.context, o.HooksPostMessageImageHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/message/livelocation"] = hooks.NewPostMessageLivelocation(o.context, o.HooksPostMessageLivelocationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/message/location"] = hooks.NewPostMessageLocation(o.context, o.HooksPostMessageLocationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/message/text"] = hooks.NewPostMessageText(o.context, o.HooksPostMessageTextHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/message/video"] = hooks.NewPostMessageVideo(o.context, o.HooksPostMessageVideoHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/notify/connectivity"] = hooks.NewPostNotifyConnectivity(o.context, o.HooksPostNotifyConnectivityHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/notify/logout"] = hooks.NewPostNotifyLogout(o.context, o.HooksPostNotifyLogoutHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/notify/receive"] = hooks.NewPostNotifyReceive(o.context, o.HooksPostNotifyReceiveHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/power/battery"] = hooks.NewPostPowerBattery(o.context, o.HooksPostPowerBatteryHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/send/link"] = send.NewSendLink(o.context, o.SendSendLinkHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/send/vcard"] = send.NewSendVcard(o.context, o.SendSendVcardHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/profile/phone/connect"] = profile.NewConnect(o.context, o.ProfileConnectHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/profile/phone/disconnect"] = profile.NewDisconnect(o.context, o.ProfileDisconnectHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/number/{phoneNumber}/chats"] = number.NewGetChats(o.context, o.NumberGetChatsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profile/contacts"] = profile.NewGetContacts(o.context, o.ProfileGetContactsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/number/{phoneNumber}/haswhatsapp"] = number.NewHasWhatsApp(o.context, o.NumberHasWhatsAppHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profile/phone/isconnected"] = profile.NewIsConnected(o.context, o.ProfileIsConnectedHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/number/{phoneNumber}/online"] = number.NewIsOnline(o.context, o.NumberIsOnlineHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/profile/logout"] = profile.NewLogout(o.context, o.ProfileLogoutHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profile/me"] = profile.NewProfile(o.context, o.ProfileProfileHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/profile/scanqr"] = profile.NewScanQr(o.context, o.ProfileScanQrHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/send/audio"] = send.NewSendAudio(o.context, o.SendSendAudioHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/send/audiorecord"] = send.NewSendAudioRecord(o.context, o.SendSendAudioRecordHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/send/doc"] = send.NewSendDoc(o.context, o.SendSendDocHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/send/image"] = send.NewSendImage(o.context, o.SendSendImageHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/send/location"] = send.NewSendLocation(o.context, o.SendSendLocationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/send/ack/read"] = send.NewSendRead(o.context, o.SendSendReadHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/send/text"] = send.NewSendText(o.context, o.SendSendTextHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/send/video"] = send.NewSendVideo(o.context, o.SendSendVideoHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/profile/hook/set"] = profile.NewSetHook(o.context, o.ProfileSetHookHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *WaAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *WaAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *WaAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *WaAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *WaAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}

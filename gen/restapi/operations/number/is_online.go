// Code generated by go-swagger; DO NOT EDIT.

package number

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IsOnlineHandlerFunc turns a function with the right signature into a is online handler
type IsOnlineHandlerFunc func(IsOnlineParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IsOnlineHandlerFunc) Handle(params IsOnlineParams) middleware.Responder {
	return fn(params)
}

// IsOnlineHandler interface for that can handle valid is online params
type IsOnlineHandler interface {
	Handle(IsOnlineParams) middleware.Responder
}

// NewIsOnline creates a new http.Handler for the is online operation
func NewIsOnline(ctx *middleware.Context, handler IsOnlineHandler) *IsOnline {
	return &IsOnline{Context: ctx, Handler: handler}
}

/*IsOnline swagger:route GET /number/{phoneNumber}/online Number isOnline

IsOnline is online API

*/
type IsOnline struct {
	Context *middleware.Context
	Handler IsOnlineHandler
}

func (o *IsOnline) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewIsOnlineParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// IsOnlineOKBody is online o k body
//
// swagger:model IsOnlineOKBody
type IsOnlineOKBody struct {

	// is online
	// Required: true
	IsOnline *bool `json:"isOnline"`

	// last seen
	LastSeen string `json:"lastSeen,omitempty"`
}

// Validate validates this is online o k body
func (o *IsOnlineOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIsOnline(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IsOnlineOKBody) validateIsOnline(formats strfmt.Registry) error {

	if err := validate.Required("isOnlineOK"+"."+"isOnline", "body", o.IsOnline); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IsOnlineOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IsOnlineOKBody) UnmarshalBinary(b []byte) error {
	var res IsOnlineOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

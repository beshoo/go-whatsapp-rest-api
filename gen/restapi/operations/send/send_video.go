// Code generated by go-swagger; DO NOT EDIT.

package send

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SendVideoHandlerFunc turns a function with the right signature into a send video handler
type SendVideoHandlerFunc func(SendVideoParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SendVideoHandlerFunc) Handle(params SendVideoParams) middleware.Responder {
	return fn(params)
}

// SendVideoHandler interface for that can handle valid send video params
type SendVideoHandler interface {
	Handle(SendVideoParams) middleware.Responder
}

// NewSendVideo creates a new http.Handler for the send video operation
func NewSendVideo(ctx *middleware.Context, handler SendVideoHandler) *SendVideo {
	return &SendVideo{Context: ctx, Handler: handler}
}

/*SendVideo swagger:route POST /send/video Send sendVideo

Send video message

*/
type SendVideo struct {
	Context *middleware.Context
	Handler SendVideoHandler
}

func (o *SendVideo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSendVideoParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

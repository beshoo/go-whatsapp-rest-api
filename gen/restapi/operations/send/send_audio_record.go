// Code generated by go-swagger; DO NOT EDIT.

package send

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SendAudioRecordHandlerFunc turns a function with the right signature into a send audio record handler
type SendAudioRecordHandlerFunc func(SendAudioRecordParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SendAudioRecordHandlerFunc) Handle(params SendAudioRecordParams) middleware.Responder {
	return fn(params)
}

// SendAudioRecordHandler interface for that can handle valid send audio record params
type SendAudioRecordHandler interface {
	Handle(SendAudioRecordParams) middleware.Responder
}

// NewSendAudioRecord creates a new http.Handler for the send audio record operation
func NewSendAudioRecord(ctx *middleware.Context, handler SendAudioRecordHandler) *SendAudioRecord {
	return &SendAudioRecord{Context: ctx, Handler: handler}
}

/*SendAudioRecord swagger:route POST /send/audiorecord Send sendAudioRecord

Send audio record message

*/
type SendAudioRecord struct {
	Context *middleware.Context
	Handler SendAudioRecordHandler
}

func (o *SendAudioRecord) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSendAudioRecordParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

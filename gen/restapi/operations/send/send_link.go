// Code generated by go-swagger; DO NOT EDIT.

package send

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SendLinkHandlerFunc turns a function with the right signature into a send link handler
type SendLinkHandlerFunc func(SendLinkParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SendLinkHandlerFunc) Handle(params SendLinkParams) middleware.Responder {
	return fn(params)
}

// SendLinkHandler interface for that can handle valid send link params
type SendLinkHandler interface {
	Handle(SendLinkParams) middleware.Responder
}

// NewSendLink creates a new http.Handler for the send link operation
func NewSendLink(ctx *middleware.Context, handler SendLinkHandler) *SendLink {
	return &SendLink{Context: ctx, Handler: handler}
}

/*SendLink swagger:route POST /send/link Send sendLink

Send Link Preview

*/
type SendLink struct {
	Context *middleware.Context
	Handler SendLinkHandler
}

func (o *SendLink) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSendLinkParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// Code generated by go-swagger; DO NOT EDIT.

package send

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SendLocationHandlerFunc turns a function with the right signature into a send location handler
type SendLocationHandlerFunc func(SendLocationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SendLocationHandlerFunc) Handle(params SendLocationParams) middleware.Responder {
	return fn(params)
}

// SendLocationHandler interface for that can handle valid send location params
type SendLocationHandler interface {
	Handle(SendLocationParams) middleware.Responder
}

// NewSendLocation creates a new http.Handler for the send location operation
func NewSendLocation(ctx *middleware.Context, handler SendLocationHandler) *SendLocation {
	return &SendLocation{Context: ctx, Handler: handler}
}

/*SendLocation swagger:route POST /send/location Send sendLocation

Send location message

*/
type SendLocation struct {
	Context *middleware.Context
	Handler SendLocationHandler
}

func (o *SendLocation) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSendLocationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

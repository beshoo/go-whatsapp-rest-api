// Code generated by go-swagger; DO NOT EDIT.

package hooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostMessageVideoHandlerFunc turns a function with the right signature into a post message video handler
type PostMessageVideoHandlerFunc func(PostMessageVideoParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostMessageVideoHandlerFunc) Handle(params PostMessageVideoParams) middleware.Responder {
	return fn(params)
}

// PostMessageVideoHandler interface for that can handle valid post message video params
type PostMessageVideoHandler interface {
	Handle(PostMessageVideoParams) middleware.Responder
}

// NewPostMessageVideo creates a new http.Handler for the post message video operation
func NewPostMessageVideo(ctx *middleware.Context, handler PostMessageVideoHandler) *PostMessageVideo {
	return &PostMessageVideo{Context: ctx, Handler: handler}
}

/*PostMessageVideo swagger:route POST /message/video Hooks postMessageVideo

Video message hook

*/
type PostMessageVideo struct {
	Context *middleware.Context
	Handler PostMessageVideoHandler
}

func (o *PostMessageVideo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostMessageVideoParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// Code generated by go-swagger; DO NOT EDIT.

package hooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostMessageTextHandlerFunc turns a function with the right signature into a post message text handler
type PostMessageTextHandlerFunc func(PostMessageTextParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostMessageTextHandlerFunc) Handle(params PostMessageTextParams) middleware.Responder {
	return fn(params)
}

// PostMessageTextHandler interface for that can handle valid post message text params
type PostMessageTextHandler interface {
	Handle(PostMessageTextParams) middleware.Responder
}

// NewPostMessageText creates a new http.Handler for the post message text operation
func NewPostMessageText(ctx *middleware.Context, handler PostMessageTextHandler) *PostMessageText {
	return &PostMessageText{Context: ctx, Handler: handler}
}

/*PostMessageText swagger:route POST /message/text Hooks postMessageText

Text message hook

*/
type PostMessageText struct {
	Context *middleware.Context
	Handler PostMessageTextHandler
}

func (o *PostMessageText) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostMessageTextParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// Code generated by go-swagger; DO NOT EDIT.

package hooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostNotifyReceiveHandlerFunc turns a function with the right signature into a post notify receive handler
type PostNotifyReceiveHandlerFunc func(PostNotifyReceiveParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostNotifyReceiveHandlerFunc) Handle(params PostNotifyReceiveParams) middleware.Responder {
	return fn(params)
}

// PostNotifyReceiveHandler interface for that can handle valid post notify receive params
type PostNotifyReceiveHandler interface {
	Handle(PostNotifyReceiveParams) middleware.Responder
}

// NewPostNotifyReceive creates a new http.Handler for the post notify receive operation
func NewPostNotifyReceive(ctx *middleware.Context, handler PostNotifyReceiveHandler) *PostNotifyReceive {
	return &PostNotifyReceive{Context: ctx, Handler: handler}
}

/*PostNotifyReceive swagger:route POST /notify/receive Hooks postNotifyReceive

Notify when user receive the message

*/
type PostNotifyReceive struct {
	Context *middleware.Context
	Handler PostNotifyReceiveHandler
}

func (o *PostNotifyReceive) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostNotifyReceiveParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

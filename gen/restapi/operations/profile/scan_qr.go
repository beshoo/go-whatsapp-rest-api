// Code generated by go-swagger; DO NOT EDIT.

package profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ScanQrHandlerFunc turns a function with the right signature into a scan qr handler
type ScanQrHandlerFunc func(ScanQrParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ScanQrHandlerFunc) Handle(params ScanQrParams) middleware.Responder {
	return fn(params)
}

// ScanQrHandler interface for that can handle valid scan qr params
type ScanQrHandler interface {
	Handle(ScanQrParams) middleware.Responder
}

// NewScanQr creates a new http.Handler for the scan qr operation
func NewScanQr(ctx *middleware.Context, handler ScanQrHandler) *ScanQr {
	return &ScanQr{Context: ctx, Handler: handler}
}

/*ScanQr swagger:route POST /profile/scanqr Profile scanQr

Create a <b>UUID4</b> identifier to use as sessionId. you will need to use this for every subsequent call, or use this [ScanQR](/qrcode) link

*/
type ScanQr struct {
	Context *middleware.Context
	Handler ScanQrHandler
}

func (o *ScanQr) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewScanQrParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

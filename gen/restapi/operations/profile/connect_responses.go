// Code generated by go-swagger; DO NOT EDIT.

package profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"bitbucket.org/rockyOO7/wa-api/gen/models"
)

// ConnectOKCode is the HTTP code returned for type ConnectOK
const ConnectOKCode int = 200

/*ConnectOK Ok

swagger:response connectOK
*/
type ConnectOK struct {
}

// NewConnectOK creates ConnectOK with default headers values
func NewConnectOK() *ConnectOK {

	return &ConnectOK{}
}

// WriteResponse to the client
func (o *ConnectOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

/*ConnectDefault Error Response

swagger:response connectDefault
*/
type ConnectDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewConnectDefault creates ConnectDefault with default headers values
func NewConnectDefault(code int) *ConnectDefault {
	if code <= 0 {
		code = 500
	}

	return &ConnectDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the connect default response
func (o *ConnectDefault) WithStatusCode(code int) *ConnectDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the connect default response
func (o *ConnectDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the connect default response
func (o *ConnectDefault) WithPayload(payload *models.Error) *ConnectDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the connect default response
func (o *ConnectDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ConnectDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

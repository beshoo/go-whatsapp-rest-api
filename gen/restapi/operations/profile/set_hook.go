// Code generated by go-swagger; DO NOT EDIT.

package profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SetHookHandlerFunc turns a function with the right signature into a set hook handler
type SetHookHandlerFunc func(SetHookParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SetHookHandlerFunc) Handle(params SetHookParams) middleware.Responder {
	return fn(params)
}

// SetHookHandler interface for that can handle valid set hook params
type SetHookHandler interface {
	Handle(SetHookParams) middleware.Responder
}

// NewSetHook creates a new http.Handler for the set hook operation
func NewSetHook(ctx *middleware.Context, handler SetHookHandler) *SetHook {
	return &SetHook{Context: ctx, Handler: handler}
}

/*SetHook swagger:route POST /profile/hook/set Profile setHook

Set Hook for callbacks, refer hooks section for all hooks which will be called

*/
type SetHook struct {
	Context *middleware.Context
	Handler SetHookHandler
}

func (o *SetHook) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSetHookParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MessageLocation message location
//
// swagger:model MessageLocation
type MessageLocation struct {

	// address
	Address string `json:"address,omitempty"`

	// context info
	// Required: true
	ContextInfo *MessageContext `json:"contextInfo"`

	// latitude degree
	LatitudeDegree float64 `json:"latitudeDegree,omitempty"`

	// longitute degree
	LongituteDegree float64 `json:"longituteDegree,omitempty"`

	// message info
	// Required: true
	MessageInfo *MessageInfo `json:"messageInfo"`

	// name
	Name string `json:"name,omitempty"`

	// thumbnail
	Thumbnail string `json:"thumbnail,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this message location
func (m *MessageLocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContextInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MessageLocation) validateContextInfo(formats strfmt.Registry) error {

	if err := validate.Required("contextInfo", "body", m.ContextInfo); err != nil {
		return err
	}

	if m.ContextInfo != nil {
		if err := m.ContextInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contextInfo")
			}
			return err
		}
	}

	return nil
}

func (m *MessageLocation) validateMessageInfo(formats strfmt.Registry) error {

	if err := validate.Required("messageInfo", "body", m.MessageInfo); err != nil {
		return err
	}

	if m.MessageInfo != nil {
		if err := m.MessageInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("messageInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MessageLocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MessageLocation) UnmarshalBinary(b []byte) error {
	var res MessageLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

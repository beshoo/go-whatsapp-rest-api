// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MessageInfo message info
//
// swagger:model MessageInfo
type MessageInfo struct {

	// from
	// Required: true
	From *string `json:"from"`

	// from me
	// Required: true
	FromMe *bool `json:"fromMe"`

	// message Id
	// Required: true
	MessageID *string `json:"messageId"`

	// owner
	// Required: true
	Owner *MessageInfoOwner `json:"owner"`

	// push name
	PushName string `json:"pushName,omitempty"`

	// status
	Status int64 `json:"status,omitempty"`

	// timestamp
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`

	// to
	// Required: true
	To *string `json:"to"`
}

// Validate validates this message info
func (m *MessageInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromMe(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MessageInfo) validateFrom(formats strfmt.Registry) error {

	if err := validate.Required("from", "body", m.From); err != nil {
		return err
	}

	return nil
}

func (m *MessageInfo) validateFromMe(formats strfmt.Registry) error {

	if err := validate.Required("fromMe", "body", m.FromMe); err != nil {
		return err
	}

	return nil
}

func (m *MessageInfo) validateMessageID(formats strfmt.Registry) error {

	if err := validate.Required("messageId", "body", m.MessageID); err != nil {
		return err
	}

	return nil
}

func (m *MessageInfo) validateOwner(formats strfmt.Registry) error {

	if err := validate.Required("owner", "body", m.Owner); err != nil {
		return err
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *MessageInfo) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MessageInfo) validateTo(formats strfmt.Registry) error {

	if err := validate.Required("to", "body", m.To); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MessageInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MessageInfo) UnmarshalBinary(b []byte) error {
	var res MessageInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MessageInfoOwner message info owner
//
// swagger:model MessageInfoOwner
type MessageInfoOwner struct {

	// number
	// Required: true
	Number *string `json:"number"`

	// session Id
	// Required: true
	SessionID *string `json:"sessionId"`
}

// Validate validates this message info owner
func (m *MessageInfoOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MessageInfoOwner) validateNumber(formats strfmt.Registry) error {

	if err := validate.Required("owner"+"."+"number", "body", m.Number); err != nil {
		return err
	}

	return nil
}

func (m *MessageInfoOwner) validateSessionID(formats strfmt.Registry) error {

	if err := validate.Required("owner"+"."+"sessionId", "body", m.SessionID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MessageInfoOwner) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MessageInfoOwner) UnmarshalBinary(b []byte) error {
	var res MessageInfoOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

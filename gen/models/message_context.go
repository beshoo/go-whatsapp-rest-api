// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MessageContext message context
//
// swagger:model MessageContext
type MessageContext struct {

	// is forwarded
	// Required: true
	IsForwarded *bool `json:"isForwarded"`

	// participant
	Participant string `json:"participant,omitempty"`

	// product message currency code
	ProductMessageCurrencyCode string `json:"productMessageCurrencyCode,omitempty"`

	// product message description
	ProductMessageDescription string `json:"productMessageDescription,omitempty"`

	// product message Id
	ProductMessageID string `json:"productMessageId,omitempty"`

	// product message price
	ProductMessagePrice string `json:"productMessagePrice,omitempty"`

	// product message retailer Id
	ProductMessageRetailerID string `json:"productMessageRetailerId,omitempty"`

	// product message title
	ProductMessageTitle string `json:"productMessageTitle,omitempty"`

	// product message type
	ProductMessageType bool `json:"productMessageType,omitempty"`

	// product message Url
	ProductMessageURL string `json:"productMessageUrl,omitempty"`

	// quoted message Id
	QuotedMessageID string `json:"quotedMessageId,omitempty"`
}

// Validate validates this message context
func (m *MessageContext) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsForwarded(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MessageContext) validateIsForwarded(formats strfmt.Registry) error {

	if err := validate.Required("isForwarded", "body", m.IsForwarded); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MessageContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MessageContext) UnmarshalBinary(b []byte) error {
	var res MessageContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

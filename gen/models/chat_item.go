// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChatItem chat item
//
// swagger:model ChatItem
type ChatItem struct {

	// audio
	Audio string `json:"audio,omitempty"`

	// audio length
	AudioLength string `json:"audioLength,omitempty"`

	// caption
	Caption string `json:"caption,omitempty"`

	// doc
	Doc string `json:"doc,omitempty"`

	// doc title
	DocTitle string `json:"docTitle,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// image thumb
	ImageThumb string `json:"imageThumb,omitempty"`

	// message context
	MessageContext *MessageContext `json:"messageContext,omitempty"`

	// message info
	MessageInfo *MessageInfo `json:"messageInfo,omitempty"`

	// message type
	// Enum: [TEXT IMAGE VIDEO AUDIO DOC LOCATION]
	MessageType string `json:"messageType,omitempty"`

	// page count
	PageCount int64 `json:"pageCount,omitempty"`

	// text
	Text string `json:"text,omitempty"`

	// video
	Video string `json:"video,omitempty"`

	// video thumb
	VideoThumb string `json:"videoThumb,omitempty"`
}

// Validate validates this chat item
func (m *ChatItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessageContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChatItem) validateMessageContext(formats strfmt.Registry) error {

	if swag.IsZero(m.MessageContext) { // not required
		return nil
	}

	if m.MessageContext != nil {
		if err := m.MessageContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("messageContext")
			}
			return err
		}
	}

	return nil
}

func (m *ChatItem) validateMessageInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.MessageInfo) { // not required
		return nil
	}

	if m.MessageInfo != nil {
		if err := m.MessageInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("messageInfo")
			}
			return err
		}
	}

	return nil
}

var chatItemTypeMessageTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TEXT","IMAGE","VIDEO","AUDIO","DOC","LOCATION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chatItemTypeMessageTypePropEnum = append(chatItemTypeMessageTypePropEnum, v)
	}
}

const (

	// ChatItemMessageTypeTEXT captures enum value "TEXT"
	ChatItemMessageTypeTEXT string = "TEXT"

	// ChatItemMessageTypeIMAGE captures enum value "IMAGE"
	ChatItemMessageTypeIMAGE string = "IMAGE"

	// ChatItemMessageTypeVIDEO captures enum value "VIDEO"
	ChatItemMessageTypeVIDEO string = "VIDEO"

	// ChatItemMessageTypeAUDIO captures enum value "AUDIO"
	ChatItemMessageTypeAUDIO string = "AUDIO"

	// ChatItemMessageTypeDOC captures enum value "DOC"
	ChatItemMessageTypeDOC string = "DOC"

	// ChatItemMessageTypeLOCATION captures enum value "LOCATION"
	ChatItemMessageTypeLOCATION string = "LOCATION"
)

// prop value enum
func (m *ChatItem) validateMessageTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, chatItemTypeMessageTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ChatItem) validateMessageType(formats strfmt.Registry) error {

	if swag.IsZero(m.MessageType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMessageTypeEnum("messageType", "body", m.MessageType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChatItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChatItem) UnmarshalBinary(b []byte) error {
	var res ChatItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
